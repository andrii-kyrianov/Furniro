@use 'sass:math';
  


@mixin mediaBg() {
	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
	    @content;
    }
}

@mixin tablet () {
    @media (max-width: 950px) {
		@content;
	}
}

@mixin mobile () {
    @media (max-width: 650px) {
		@content;
	}
}


// для rem
@function rem($pixel) {
  @if math.is-unitless($pixel) {
    @return math.div($pixel, 16) + rem;
  } @else {
    @error 'Не используйте единицы измерения при работе с функцией rem()! Передавайте аргументом только числа.'
  }
};

// Адаптивные свойства
$maxWidth: 1920;
$maxWidthContainer: 1310;

@mixin adaptiv-value($property, $startSize, $minSize, $type, $minWidthLimit: 320, $maxWidthLimit: $maxWidth) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    // Тільки якщо менше контейнера
    #{$property}: rem($startSize);

    @media (max-width: #{rem($maxWidthContainer)}) and (min-width: #{rem($minWidthLimit)}) {
      #{$property}: calc(#{rem($minSize)} + #{$addSize} * ((100vw - #{$minWidthLimit}px) / #{$maxWidthContainer - $minWidthLimit}));
    }
  }

  @else if $type==2 {
    // Тільки якщо більше контейнера
    #{$property}: rem($startSize);

    @media (min-width: #{rem($maxWidthContainer)}) and (max-width: #{rem($maxWidthLimit)}) {
      #{$property}: calc(#{rem($minSize)} + #{$addSize} * ((100vw - #{$minWidthLimit}px) / #{$maxWidthLimit - $minWidthLimit}));
    }
  }

  @else {
    // Завжди з обмеженнями
    #{$property}: rem($startSize);

    @media (min-width: #{rem($minWidthLimit)}) and (max-width: #{rem($maxWidthLimit)}) {
      #{$property}: calc(#{rem($minSize)} + #{$addSize} * ((100vw - #{$minWidthLimit}px) / #{$maxWidthLimit - $minWidthLimit}));
    }
  }
}





  
  
  